@startuml Flowchart
  (Quellcode) --> (Präprozessor): HelloWorld.c
  note left of (Quellcode)
    Dateiinhalt:
    [source, cpp]
    ----
    #include <stdio.h>
    int main() {
        printf("Hello, World!\n");
        return 0;
    }
    ----
  end note

  (Präprozessor) --> (Compiler): HelloWorld.i
  note left of (Präprozessor)
    Dateiinhalt nach der Präprozessierung:
    [source, cpp]
    ----
    # 1 "HelloWorld.c"
    # 1 "<built-in>"
    # 1 "<command-line>"
    # 1 "HelloWorld.c"
    # 1 "/usr/include/stdc-predef.h" 1 3 4
    ...
    int main() {
        printf("Hello, World!\n");
        return 0;
    }
    ----
  end note

  (Compiler) --> (Assembler): HelloWorld.s
  note left of (Compiler)
    Übersetzungsausgabe (Assembler-Code):
    [source, asm]
    ----
    global _start

    section .data
    hello db 'Hello, World!', 0

    section .text
    _start:
        ; write Hello, World! to stdout
        mov eax, 4
        mov ebx, 1
        mov ecx, hello
        mov edx, 13
        int 0x80

        ; exit
        mov eax, 1
        xor ebx, ebx
        int 0x80
    ----
  end note

  (Assembler) --> (Linker): HelloWorld.o
  note left of (Assembler)
    Übersetzungsausgabe (Objektdatei):
    [source, asm]
    ----
    Relocation section '.text' at offset 0x1000 contains 1 entries:
    Offset     Info    Type            Sym.Value  Sym. Name
    00000004  00000905 R_386_32          00000000   hello

    Disassembly of section .text:

    00000000 <_start>:
        0:  b8 04 00 00 00          mov    $0x4,%eax
        5:  bb 01 00 00 00          mov    $0x1,%ebx
        a:  b9 00 20 40 00          mov    $0x402000,%ecx
        f:  ba 0d 00 00 00          mov    $0xd,%edx
       14:  cd 80                   int    $0x80
       16:  b8 01 00 00 00          mov    $0x1,%eax
       1b:  31 db                   xor    %ebx,%ebx
       1d:  cd 80                   int    $0x80
    ----
  end note

  (Linker) --> (Assembler): HelloWorld
  note left of (Linker)
    Übersetzungsausgabe (Ausführbare Datei):
    ```
    Executable File

    Entry Point: _start

    Section Headers:
    [Nr] Name         Type      Addr     Off  Size  ES Flg Lk Inf Al
    [ 0] NULL         NULL      00000000 000000 000000 00      0   0  0
    [ 1] .data        PROGBITS  08049000 000034 00000b 00  WA  0   0  4
    [ 2] .text        PROGBITS  08048080 000020 000012 00  AX  0   0 16

    Program Headers:
    Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
    PHDR           0x000034 0x08048034 0x08048034 0x000c0 0x000c0 R E 0x4
    INTERP         0x0000f4 0x080480f4 0x080480f4 0x00013 0x00013 R   0x1
    LOAD           0x000000 0x08048000 0x08048000 0x000b1 0x000b1 R E 0x1000
    LOAD           0x0000b8 0x080490b8 0x080490b8 0x00003 0x0000b R   0x1000
    ...
    ```
  end note

@enduml
